// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validator.proto

package sawtooth.sdk.protobuf;

/**
 * <pre>
 * The message passed between the validator and client, containing the
 * header fields and content.
 * </pre>
 *
 * Protobuf type {@code Message}
 */
public  final class Message extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:Message)
    MessageOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Message.newBuilder() to construct.
  private Message(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Message() {
    messageType_ = 0;
    correlationId_ = "";
    content_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Message(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            messageType_ = rawValue;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            correlationId_ = s;
            break;
          }
          case 26: {

            content_ = input.readBytes();
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return sawtooth.sdk.protobuf.Validator.internal_static_Message_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return sawtooth.sdk.protobuf.Validator.internal_static_Message_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            sawtooth.sdk.protobuf.Message.class, sawtooth.sdk.protobuf.Message.Builder.class);
  }

  /**
   * Protobuf enum {@code Message.MessageType}
   */
  public enum MessageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DEFAULT = 0;</code>
     */
    DEFAULT(0),
    /**
     * <pre>
     * Registration request from the transaction processor to the validator
     * </pre>
     *
     * <code>TP_REGISTER_REQUEST = 1;</code>
     */
    TP_REGISTER_REQUEST(1),
    /**
     * <pre>
     * Registration response from the validator to the
     * transaction processor
     * </pre>
     *
     * <code>TP_REGISTER_RESPONSE = 2;</code>
     */
    TP_REGISTER_RESPONSE(2),
    /**
     * <pre>
     * Tell the validator that the transaction processor
     * won't take any more transactions
     * </pre>
     *
     * <code>TP_UNREGISTER_REQUEST = 3;</code>
     */
    TP_UNREGISTER_REQUEST(3),
    /**
     * <pre>
     * Response from the validator to the tp that it won't
     * send any more transactions
     * </pre>
     *
     * <code>TP_UNREGISTER_RESPONSE = 4;</code>
     */
    TP_UNREGISTER_RESPONSE(4),
    /**
     * <pre>
     * Process Request from the validator/executor to the
     * transaction processor
     * </pre>
     *
     * <code>TP_PROCESS_REQUEST = 5;</code>
     */
    TP_PROCESS_REQUEST(5),
    /**
     * <pre>
     * Process response from the transaction processor to the validator/executor
     * </pre>
     *
     * <code>TP_PROCESS_RESPONSE = 6;</code>
     */
    TP_PROCESS_RESPONSE(6),
    /**
     * <pre>
     * State get request from the transaction processor to validator/context_manager
     * </pre>
     *
     * <code>TP_STATE_GET_REQUEST = 7;</code>
     */
    TP_STATE_GET_REQUEST(7),
    /**
     * <pre>
     * State get response from the validator/context_manager to the transaction processor
     * </pre>
     *
     * <code>TP_STATE_GET_RESPONSE = 8;</code>
     */
    TP_STATE_GET_RESPONSE(8),
    /**
     * <pre>
     * State set request from the transaction processor to the validator/context_manager
     * </pre>
     *
     * <code>TP_STATE_SET_REQUEST = 9;</code>
     */
    TP_STATE_SET_REQUEST(9),
    /**
     * <pre>
     * State set response from the validator/context_manager to the transaction processor
     * </pre>
     *
     * <code>TP_STATE_SET_RESPONSE = 10;</code>
     */
    TP_STATE_SET_RESPONSE(10),
    /**
     * <pre>
     * State delete request from the transaction processor to the validator/context_manager
     * </pre>
     *
     * <code>TP_STATE_DELETE_REQUEST = 11;</code>
     */
    TP_STATE_DELETE_REQUEST(11),
    /**
     * <pre>
     * State delete response from the validator/context_manager to the transaction processor
     * </pre>
     *
     * <code>TP_STATE_DELETE_RESPONSE = 12;</code>
     */
    TP_STATE_DELETE_RESPONSE(12),
    /**
     * <pre>
     * Message to append data to a transaction receipt
     * </pre>
     *
     * <code>TP_RECEIPT_ADD_DATA_REQUEST = 13;</code>
     */
    TP_RECEIPT_ADD_DATA_REQUEST(13),
    /**
     * <pre>
     * Response from validator to tell transaction processor that data has been appended
     * </pre>
     *
     * <code>TP_RECEIPT_ADD_DATA_RESPONSE = 14;</code>
     */
    TP_RECEIPT_ADD_DATA_RESPONSE(14),
    /**
     * <pre>
     * Message to add event
     * </pre>
     *
     * <code>TP_EVENT_ADD_REQUEST = 15;</code>
     */
    TP_EVENT_ADD_REQUEST(15),
    /**
     * <pre>
     * Response from validator to tell transaction processor that event has been created
     * </pre>
     *
     * <code>TP_EVENT_ADD_RESPONSE = 16;</code>
     */
    TP_EVENT_ADD_RESPONSE(16),
    /**
     * <pre>
     * Submission of a batchlist from the web api or another client to the validator
     * </pre>
     *
     * <code>CLIENT_BATCH_SUBMIT_REQUEST = 100;</code>
     */
    CLIENT_BATCH_SUBMIT_REQUEST(100),
    /**
     * <pre>
     * Response from the validator to the web api/client that the submission was accepted
     * </pre>
     *
     * <code>CLIENT_BATCH_SUBMIT_RESPONSE = 101;</code>
     */
    CLIENT_BATCH_SUBMIT_RESPONSE(101),
    /**
     * <pre>
     * A request to list blocks from the web api/client to the validator
     * </pre>
     *
     * <code>CLIENT_BLOCK_LIST_REQUEST = 102;</code>
     */
    CLIENT_BLOCK_LIST_REQUEST(102),
    /**
     * <code>CLIENT_BLOCK_LIST_RESPONSE = 103;</code>
     */
    CLIENT_BLOCK_LIST_RESPONSE(103),
    /**
     * <code>CLIENT_BLOCK_GET_BY_ID_REQUEST = 104;</code>
     */
    CLIENT_BLOCK_GET_BY_ID_REQUEST(104),
    /**
     * <code>CLIENT_BLOCK_GET_RESPONSE = 105;</code>
     */
    CLIENT_BLOCK_GET_RESPONSE(105),
    /**
     * <code>CLIENT_BATCH_LIST_REQUEST = 106;</code>
     */
    CLIENT_BATCH_LIST_REQUEST(106),
    /**
     * <code>CLIENT_BATCH_LIST_RESPONSE = 107;</code>
     */
    CLIENT_BATCH_LIST_RESPONSE(107),
    /**
     * <code>CLIENT_BATCH_GET_REQUEST = 108;</code>
     */
    CLIENT_BATCH_GET_REQUEST(108),
    /**
     * <code>CLIENT_BATCH_GET_RESPONSE = 109;</code>
     */
    CLIENT_BATCH_GET_RESPONSE(109),
    /**
     * <code>CLIENT_TRANSACTION_LIST_REQUEST = 110;</code>
     */
    CLIENT_TRANSACTION_LIST_REQUEST(110),
    /**
     * <code>CLIENT_TRANSACTION_LIST_RESPONSE = 111;</code>
     */
    CLIENT_TRANSACTION_LIST_RESPONSE(111),
    /**
     * <code>CLIENT_TRANSACTION_GET_REQUEST = 112;</code>
     */
    CLIENT_TRANSACTION_GET_REQUEST(112),
    /**
     * <code>CLIENT_TRANSACTION_GET_RESPONSE = 113;</code>
     */
    CLIENT_TRANSACTION_GET_RESPONSE(113),
    /**
     * <pre>
     * Client state request of the current state hash to be retrieved from the journal
     * </pre>
     *
     * <code>CLIENT_STATE_CURRENT_REQUEST = 114;</code>
     */
    CLIENT_STATE_CURRENT_REQUEST(114),
    /**
     * <pre>
     * Response with the current state hash
     * </pre>
     *
     * <code>CLIENT_STATE_CURRENT_RESPONSE = 115;</code>
     */
    CLIENT_STATE_CURRENT_RESPONSE(115),
    /**
     * <pre>
     * A request of all the addresses under a particular prefix, for a state hash.
     * </pre>
     *
     * <code>CLIENT_STATE_LIST_REQUEST = 116;</code>
     */
    CLIENT_STATE_LIST_REQUEST(116),
    /**
     * <pre>
     * The response of the addresses
     * </pre>
     *
     * <code>CLIENT_STATE_LIST_RESPONSE = 117;</code>
     */
    CLIENT_STATE_LIST_RESPONSE(117),
    /**
     * <pre>
     * Get the address:data entry at a particular address
     * </pre>
     *
     * <code>CLIENT_STATE_GET_REQUEST = 118;</code>
     */
    CLIENT_STATE_GET_REQUEST(118),
    /**
     * <pre>
     * The response with the entry
     * </pre>
     *
     * <code>CLIENT_STATE_GET_RESPONSE = 119;</code>
     */
    CLIENT_STATE_GET_RESPONSE(119),
    /**
     * <pre>
     * A request for the status of a batch or batches
     * </pre>
     *
     * <code>CLIENT_BATCH_STATUS_REQUEST = 120;</code>
     */
    CLIENT_BATCH_STATUS_REQUEST(120),
    /**
     * <pre>
     * A response with the batch statuses
     * </pre>
     *
     * <code>CLIENT_BATCH_STATUS_RESPONSE = 121;</code>
     */
    CLIENT_BATCH_STATUS_RESPONSE(121),
    /**
     * <pre>
     * A request for one or more transaction receipts
     * </pre>
     *
     * <code>CLIENT_RECEIPT_GET_REQUEST = 122;</code>
     */
    CLIENT_RECEIPT_GET_REQUEST(122),
    /**
     * <pre>
     * A response with the receipts
     * </pre>
     *
     * <code>CLIENT_RECEIPT_GET_RESPONSE = 123;</code>
     */
    CLIENT_RECEIPT_GET_RESPONSE(123),
    /**
     * <code>CLIENT_BLOCK_GET_BY_NUM_REQUEST = 124;</code>
     */
    CLIENT_BLOCK_GET_BY_NUM_REQUEST(124),
    /**
     * <pre>
     * A request for a validator's peers
     * </pre>
     *
     * <code>CLIENT_PEERS_GET_REQUEST = 125;</code>
     */
    CLIENT_PEERS_GET_REQUEST(125),
    /**
     * <pre>
     * A response with the validator's peers
     * </pre>
     *
     * <code>CLIENT_PEERS_GET_RESPONSE = 126;</code>
     */
    CLIENT_PEERS_GET_RESPONSE(126),
    /**
     * <code>CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST = 127;</code>
     */
    CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST(127),
    /**
     * <code>CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST = 128;</code>
     */
    CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST(128),
    /**
     * <pre>
     * A request for a validator's status
     * </pre>
     *
     * <code>CLIENT_STATUS_GET_REQUEST = 129;</code>
     */
    CLIENT_STATUS_GET_REQUEST(129),
    /**
     * <pre>
     * A response with the validator's status
     * </pre>
     *
     * <code>CLIENT_STATUS_GET_RESPONSE = 130;</code>
     */
    CLIENT_STATUS_GET_RESPONSE(130),
    /**
     * <pre>
     * Message types for events
     * </pre>
     *
     * <code>CLIENT_EVENTS_SUBSCRIBE_REQUEST = 500;</code>
     */
    CLIENT_EVENTS_SUBSCRIBE_REQUEST(500),
    /**
     * <code>CLIENT_EVENTS_SUBSCRIBE_RESPONSE = 501;</code>
     */
    CLIENT_EVENTS_SUBSCRIBE_RESPONSE(501),
    /**
     * <code>CLIENT_EVENTS_UNSUBSCRIBE_REQUEST = 502;</code>
     */
    CLIENT_EVENTS_UNSUBSCRIBE_REQUEST(502),
    /**
     * <code>CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE = 503;</code>
     */
    CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE(503),
    /**
     * <code>CLIENT_EVENTS = 504;</code>
     */
    CLIENT_EVENTS(504),
    /**
     * <code>CLIENT_EVENTS_GET_REQUEST = 505;</code>
     */
    CLIENT_EVENTS_GET_REQUEST(505),
    /**
     * <code>CLIENT_EVENTS_GET_RESPONSE = 506;</code>
     */
    CLIENT_EVENTS_GET_RESPONSE(506),
    /**
     * <pre>
     * Temp message types until a discussion can be had about gossip msg
     * </pre>
     *
     * <code>GOSSIP_MESSAGE = 200;</code>
     */
    GOSSIP_MESSAGE(200),
    /**
     * <code>GOSSIP_REGISTER = 201;</code>
     */
    GOSSIP_REGISTER(201),
    /**
     * <code>GOSSIP_UNREGISTER = 202;</code>
     */
    GOSSIP_UNREGISTER(202),
    /**
     * <code>GOSSIP_BLOCK_REQUEST = 205;</code>
     */
    GOSSIP_BLOCK_REQUEST(205),
    /**
     * <code>GOSSIP_BLOCK_RESPONSE = 206;</code>
     */
    GOSSIP_BLOCK_RESPONSE(206),
    /**
     * <code>GOSSIP_BATCH_BY_BATCH_ID_REQUEST = 207;</code>
     */
    GOSSIP_BATCH_BY_BATCH_ID_REQUEST(207),
    /**
     * <code>GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST = 208;</code>
     */
    GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST(208),
    /**
     * <code>GOSSIP_BATCH_RESPONSE = 209;</code>
     */
    GOSSIP_BATCH_RESPONSE(209),
    /**
     * <code>GOSSIP_GET_PEERS_REQUEST = 210;</code>
     */
    GOSSIP_GET_PEERS_REQUEST(210),
    /**
     * <code>GOSSIP_GET_PEERS_RESPONSE = 211;</code>
     */
    GOSSIP_GET_PEERS_RESPONSE(211),
    /**
     * <code>NETWORK_ACK = 300;</code>
     */
    NETWORK_ACK(300),
    /**
     * <code>NETWORK_CONNECT = 301;</code>
     */
    NETWORK_CONNECT(301),
    /**
     * <code>NETWORK_DISCONNECT = 302;</code>
     */
    NETWORK_DISCONNECT(302),
    /**
     * <pre>
     * Message types for Authorization Types
     * </pre>
     *
     * <code>AUTHORIZATION_CONNECTION_RESPONSE = 600;</code>
     */
    AUTHORIZATION_CONNECTION_RESPONSE(600),
    /**
     * <code>AUTHORIZATION_VIOLATION = 601;</code>
     */
    AUTHORIZATION_VIOLATION(601),
    /**
     * <code>AUTHORIZATION_TRUST_REQUEST = 602;</code>
     */
    AUTHORIZATION_TRUST_REQUEST(602),
    /**
     * <code>AUTHORIZATION_TRUST_RESPONSE = 603;</code>
     */
    AUTHORIZATION_TRUST_RESPONSE(603),
    /**
     * <code>AUTHORIZATION_CHALLENGE_REQUEST = 604;</code>
     */
    AUTHORIZATION_CHALLENGE_REQUEST(604),
    /**
     * <code>AUTHORIZATION_CHALLENGE_RESPONSE = 605;</code>
     */
    AUTHORIZATION_CHALLENGE_RESPONSE(605),
    /**
     * <code>AUTHORIZATION_CHALLENGE_SUBMIT = 606;</code>
     */
    AUTHORIZATION_CHALLENGE_SUBMIT(606),
    /**
     * <code>AUTHORIZATION_CHALLENGE_RESULT = 607;</code>
     */
    AUTHORIZATION_CHALLENGE_RESULT(607),
    /**
     * <code>PING_REQUEST = 700;</code>
     */
    PING_REQUEST(700),
    /**
     * <code>PING_RESPONSE = 701;</code>
     */
    PING_RESPONSE(701),
    /**
     * <pre>
     * Consensus service messages
     * </pre>
     *
     * <code>CONSENSUS_REGISTER_REQUEST = 800;</code>
     */
    CONSENSUS_REGISTER_REQUEST(800),
    /**
     * <code>CONSENSUS_REGISTER_RESPONSE = 801;</code>
     */
    CONSENSUS_REGISTER_RESPONSE(801),
    /**
     * <code>CONSENSUS_SEND_TO_REQUEST = 802;</code>
     */
    CONSENSUS_SEND_TO_REQUEST(802),
    /**
     * <code>CONSENSUS_SEND_TO_RESPONSE = 803;</code>
     */
    CONSENSUS_SEND_TO_RESPONSE(803),
    /**
     * <code>CONSENSUS_BROADCAST_REQUEST = 804;</code>
     */
    CONSENSUS_BROADCAST_REQUEST(804),
    /**
     * <code>CONSENSUS_BROADCAST_RESPONSE = 805;</code>
     */
    CONSENSUS_BROADCAST_RESPONSE(805),
    /**
     * <code>CONSENSUS_INITIALIZE_BLOCK_REQUEST = 806;</code>
     */
    CONSENSUS_INITIALIZE_BLOCK_REQUEST(806),
    /**
     * <code>CONSENSUS_INITIALIZE_BLOCK_RESPONSE = 807;</code>
     */
    CONSENSUS_INITIALIZE_BLOCK_RESPONSE(807),
    /**
     * <code>CONSENSUS_FINALIZE_BLOCK_REQUEST = 808;</code>
     */
    CONSENSUS_FINALIZE_BLOCK_REQUEST(808),
    /**
     * <code>CONSENSUS_FINALIZE_BLOCK_RESPONSE = 809;</code>
     */
    CONSENSUS_FINALIZE_BLOCK_RESPONSE(809),
    /**
     * <code>CONSENSUS_CANCEL_BLOCK_REQUEST = 810;</code>
     */
    CONSENSUS_CANCEL_BLOCK_REQUEST(810),
    /**
     * <code>CONSENSUS_CANCEL_BLOCK_RESPONSE = 811;</code>
     */
    CONSENSUS_CANCEL_BLOCK_RESPONSE(811),
    /**
     * <code>CONSENSUS_CHECK_BLOCK_REQUEST = 812;</code>
     */
    CONSENSUS_CHECK_BLOCK_REQUEST(812),
    /**
     * <code>CONSENSUS_CHECK_BLOCK_RESPONSE = 813;</code>
     */
    CONSENSUS_CHECK_BLOCK_RESPONSE(813),
    /**
     * <code>CONSENSUS_COMMIT_BLOCK_REQUEST = 814;</code>
     */
    CONSENSUS_COMMIT_BLOCK_REQUEST(814),
    /**
     * <code>CONSENSUS_COMMIT_BLOCK_RESPONSE = 815;</code>
     */
    CONSENSUS_COMMIT_BLOCK_RESPONSE(815),
    /**
     * <code>CONSENSUS_IGNORE_BLOCK_REQUEST = 816;</code>
     */
    CONSENSUS_IGNORE_BLOCK_REQUEST(816),
    /**
     * <code>CONSENSUS_IGNORE_BLOCK_RESPONSE = 817;</code>
     */
    CONSENSUS_IGNORE_BLOCK_RESPONSE(817),
    /**
     * <code>CONSENSUS_FAIL_BLOCK_REQUEST = 818;</code>
     */
    CONSENSUS_FAIL_BLOCK_REQUEST(818),
    /**
     * <code>CONSENSUS_FAIL_BLOCK_RESPONSE = 819;</code>
     */
    CONSENSUS_FAIL_BLOCK_RESPONSE(819),
    /**
     * <code>CONSENSUS_SETTINGS_GET_REQUEST = 820;</code>
     */
    CONSENSUS_SETTINGS_GET_REQUEST(820),
    /**
     * <code>CONSENSUS_SETTINGS_GET_RESPONSE = 821;</code>
     */
    CONSENSUS_SETTINGS_GET_RESPONSE(821),
    /**
     * <code>CONSENSUS_STATE_GET_REQUEST = 822;</code>
     */
    CONSENSUS_STATE_GET_REQUEST(822),
    /**
     * <code>CONSENSUS_STATE_GET_RESPONSE = 823;</code>
     */
    CONSENSUS_STATE_GET_RESPONSE(823),
    /**
     * <code>CONSENSUS_BLOCKS_GET_REQUEST = 824;</code>
     */
    CONSENSUS_BLOCKS_GET_REQUEST(824),
    /**
     * <code>CONSENSUS_BLOCKS_GET_RESPONSE = 825;</code>
     */
    CONSENSUS_BLOCKS_GET_RESPONSE(825),
    /**
     * <pre>
     * Consensus notification messages
     * </pre>
     *
     * <code>CONSENSUS_NOTIFY_PEER_CONNECTED = 900;</code>
     */
    CONSENSUS_NOTIFY_PEER_CONNECTED(900),
    /**
     * <code>CONSENSUS_NOTIFY_PEER_DISCONNECTED = 901;</code>
     */
    CONSENSUS_NOTIFY_PEER_DISCONNECTED(901),
    /**
     * <code>CONSENSUS_NOTIFY_PEER_MESSAGE = 902;</code>
     */
    CONSENSUS_NOTIFY_PEER_MESSAGE(902),
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_NEW = 903;</code>
     */
    CONSENSUS_NOTIFY_BLOCK_NEW(903),
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_VALID = 904;</code>
     */
    CONSENSUS_NOTIFY_BLOCK_VALID(904),
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_INVALID = 905;</code>
     */
    CONSENSUS_NOTIFY_BLOCK_INVALID(905),
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_COMMIT = 906;</code>
     */
    CONSENSUS_NOTIFY_BLOCK_COMMIT(906),
    /**
     * <code>CONSENSUS_NOTIFY_ACK = 999;</code>
     */
    CONSENSUS_NOTIFY_ACK(999),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DEFAULT = 0;</code>
     */
    public static final int DEFAULT_VALUE = 0;
    /**
     * <pre>
     * Registration request from the transaction processor to the validator
     * </pre>
     *
     * <code>TP_REGISTER_REQUEST = 1;</code>
     */
    public static final int TP_REGISTER_REQUEST_VALUE = 1;
    /**
     * <pre>
     * Registration response from the validator to the
     * transaction processor
     * </pre>
     *
     * <code>TP_REGISTER_RESPONSE = 2;</code>
     */
    public static final int TP_REGISTER_RESPONSE_VALUE = 2;
    /**
     * <pre>
     * Tell the validator that the transaction processor
     * won't take any more transactions
     * </pre>
     *
     * <code>TP_UNREGISTER_REQUEST = 3;</code>
     */
    public static final int TP_UNREGISTER_REQUEST_VALUE = 3;
    /**
     * <pre>
     * Response from the validator to the tp that it won't
     * send any more transactions
     * </pre>
     *
     * <code>TP_UNREGISTER_RESPONSE = 4;</code>
     */
    public static final int TP_UNREGISTER_RESPONSE_VALUE = 4;
    /**
     * <pre>
     * Process Request from the validator/executor to the
     * transaction processor
     * </pre>
     *
     * <code>TP_PROCESS_REQUEST = 5;</code>
     */
    public static final int TP_PROCESS_REQUEST_VALUE = 5;
    /**
     * <pre>
     * Process response from the transaction processor to the validator/executor
     * </pre>
     *
     * <code>TP_PROCESS_RESPONSE = 6;</code>
     */
    public static final int TP_PROCESS_RESPONSE_VALUE = 6;
    /**
     * <pre>
     * State get request from the transaction processor to validator/context_manager
     * </pre>
     *
     * <code>TP_STATE_GET_REQUEST = 7;</code>
     */
    public static final int TP_STATE_GET_REQUEST_VALUE = 7;
    /**
     * <pre>
     * State get response from the validator/context_manager to the transaction processor
     * </pre>
     *
     * <code>TP_STATE_GET_RESPONSE = 8;</code>
     */
    public static final int TP_STATE_GET_RESPONSE_VALUE = 8;
    /**
     * <pre>
     * State set request from the transaction processor to the validator/context_manager
     * </pre>
     *
     * <code>TP_STATE_SET_REQUEST = 9;</code>
     */
    public static final int TP_STATE_SET_REQUEST_VALUE = 9;
    /**
     * <pre>
     * State set response from the validator/context_manager to the transaction processor
     * </pre>
     *
     * <code>TP_STATE_SET_RESPONSE = 10;</code>
     */
    public static final int TP_STATE_SET_RESPONSE_VALUE = 10;
    /**
     * <pre>
     * State delete request from the transaction processor to the validator/context_manager
     * </pre>
     *
     * <code>TP_STATE_DELETE_REQUEST = 11;</code>
     */
    public static final int TP_STATE_DELETE_REQUEST_VALUE = 11;
    /**
     * <pre>
     * State delete response from the validator/context_manager to the transaction processor
     * </pre>
     *
     * <code>TP_STATE_DELETE_RESPONSE = 12;</code>
     */
    public static final int TP_STATE_DELETE_RESPONSE_VALUE = 12;
    /**
     * <pre>
     * Message to append data to a transaction receipt
     * </pre>
     *
     * <code>TP_RECEIPT_ADD_DATA_REQUEST = 13;</code>
     */
    public static final int TP_RECEIPT_ADD_DATA_REQUEST_VALUE = 13;
    /**
     * <pre>
     * Response from validator to tell transaction processor that data has been appended
     * </pre>
     *
     * <code>TP_RECEIPT_ADD_DATA_RESPONSE = 14;</code>
     */
    public static final int TP_RECEIPT_ADD_DATA_RESPONSE_VALUE = 14;
    /**
     * <pre>
     * Message to add event
     * </pre>
     *
     * <code>TP_EVENT_ADD_REQUEST = 15;</code>
     */
    public static final int TP_EVENT_ADD_REQUEST_VALUE = 15;
    /**
     * <pre>
     * Response from validator to tell transaction processor that event has been created
     * </pre>
     *
     * <code>TP_EVENT_ADD_RESPONSE = 16;</code>
     */
    public static final int TP_EVENT_ADD_RESPONSE_VALUE = 16;
    /**
     * <pre>
     * Submission of a batchlist from the web api or another client to the validator
     * </pre>
     *
     * <code>CLIENT_BATCH_SUBMIT_REQUEST = 100;</code>
     */
    public static final int CLIENT_BATCH_SUBMIT_REQUEST_VALUE = 100;
    /**
     * <pre>
     * Response from the validator to the web api/client that the submission was accepted
     * </pre>
     *
     * <code>CLIENT_BATCH_SUBMIT_RESPONSE = 101;</code>
     */
    public static final int CLIENT_BATCH_SUBMIT_RESPONSE_VALUE = 101;
    /**
     * <pre>
     * A request to list blocks from the web api/client to the validator
     * </pre>
     *
     * <code>CLIENT_BLOCK_LIST_REQUEST = 102;</code>
     */
    public static final int CLIENT_BLOCK_LIST_REQUEST_VALUE = 102;
    /**
     * <code>CLIENT_BLOCK_LIST_RESPONSE = 103;</code>
     */
    public static final int CLIENT_BLOCK_LIST_RESPONSE_VALUE = 103;
    /**
     * <code>CLIENT_BLOCK_GET_BY_ID_REQUEST = 104;</code>
     */
    public static final int CLIENT_BLOCK_GET_BY_ID_REQUEST_VALUE = 104;
    /**
     * <code>CLIENT_BLOCK_GET_RESPONSE = 105;</code>
     */
    public static final int CLIENT_BLOCK_GET_RESPONSE_VALUE = 105;
    /**
     * <code>CLIENT_BATCH_LIST_REQUEST = 106;</code>
     */
    public static final int CLIENT_BATCH_LIST_REQUEST_VALUE = 106;
    /**
     * <code>CLIENT_BATCH_LIST_RESPONSE = 107;</code>
     */
    public static final int CLIENT_BATCH_LIST_RESPONSE_VALUE = 107;
    /**
     * <code>CLIENT_BATCH_GET_REQUEST = 108;</code>
     */
    public static final int CLIENT_BATCH_GET_REQUEST_VALUE = 108;
    /**
     * <code>CLIENT_BATCH_GET_RESPONSE = 109;</code>
     */
    public static final int CLIENT_BATCH_GET_RESPONSE_VALUE = 109;
    /**
     * <code>CLIENT_TRANSACTION_LIST_REQUEST = 110;</code>
     */
    public static final int CLIENT_TRANSACTION_LIST_REQUEST_VALUE = 110;
    /**
     * <code>CLIENT_TRANSACTION_LIST_RESPONSE = 111;</code>
     */
    public static final int CLIENT_TRANSACTION_LIST_RESPONSE_VALUE = 111;
    /**
     * <code>CLIENT_TRANSACTION_GET_REQUEST = 112;</code>
     */
    public static final int CLIENT_TRANSACTION_GET_REQUEST_VALUE = 112;
    /**
     * <code>CLIENT_TRANSACTION_GET_RESPONSE = 113;</code>
     */
    public static final int CLIENT_TRANSACTION_GET_RESPONSE_VALUE = 113;
    /**
     * <pre>
     * Client state request of the current state hash to be retrieved from the journal
     * </pre>
     *
     * <code>CLIENT_STATE_CURRENT_REQUEST = 114;</code>
     */
    public static final int CLIENT_STATE_CURRENT_REQUEST_VALUE = 114;
    /**
     * <pre>
     * Response with the current state hash
     * </pre>
     *
     * <code>CLIENT_STATE_CURRENT_RESPONSE = 115;</code>
     */
    public static final int CLIENT_STATE_CURRENT_RESPONSE_VALUE = 115;
    /**
     * <pre>
     * A request of all the addresses under a particular prefix, for a state hash.
     * </pre>
     *
     * <code>CLIENT_STATE_LIST_REQUEST = 116;</code>
     */
    public static final int CLIENT_STATE_LIST_REQUEST_VALUE = 116;
    /**
     * <pre>
     * The response of the addresses
     * </pre>
     *
     * <code>CLIENT_STATE_LIST_RESPONSE = 117;</code>
     */
    public static final int CLIENT_STATE_LIST_RESPONSE_VALUE = 117;
    /**
     * <pre>
     * Get the address:data entry at a particular address
     * </pre>
     *
     * <code>CLIENT_STATE_GET_REQUEST = 118;</code>
     */
    public static final int CLIENT_STATE_GET_REQUEST_VALUE = 118;
    /**
     * <pre>
     * The response with the entry
     * </pre>
     *
     * <code>CLIENT_STATE_GET_RESPONSE = 119;</code>
     */
    public static final int CLIENT_STATE_GET_RESPONSE_VALUE = 119;
    /**
     * <pre>
     * A request for the status of a batch or batches
     * </pre>
     *
     * <code>CLIENT_BATCH_STATUS_REQUEST = 120;</code>
     */
    public static final int CLIENT_BATCH_STATUS_REQUEST_VALUE = 120;
    /**
     * <pre>
     * A response with the batch statuses
     * </pre>
     *
     * <code>CLIENT_BATCH_STATUS_RESPONSE = 121;</code>
     */
    public static final int CLIENT_BATCH_STATUS_RESPONSE_VALUE = 121;
    /**
     * <pre>
     * A request for one or more transaction receipts
     * </pre>
     *
     * <code>CLIENT_RECEIPT_GET_REQUEST = 122;</code>
     */
    public static final int CLIENT_RECEIPT_GET_REQUEST_VALUE = 122;
    /**
     * <pre>
     * A response with the receipts
     * </pre>
     *
     * <code>CLIENT_RECEIPT_GET_RESPONSE = 123;</code>
     */
    public static final int CLIENT_RECEIPT_GET_RESPONSE_VALUE = 123;
    /**
     * <code>CLIENT_BLOCK_GET_BY_NUM_REQUEST = 124;</code>
     */
    public static final int CLIENT_BLOCK_GET_BY_NUM_REQUEST_VALUE = 124;
    /**
     * <pre>
     * A request for a validator's peers
     * </pre>
     *
     * <code>CLIENT_PEERS_GET_REQUEST = 125;</code>
     */
    public static final int CLIENT_PEERS_GET_REQUEST_VALUE = 125;
    /**
     * <pre>
     * A response with the validator's peers
     * </pre>
     *
     * <code>CLIENT_PEERS_GET_RESPONSE = 126;</code>
     */
    public static final int CLIENT_PEERS_GET_RESPONSE_VALUE = 126;
    /**
     * <code>CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST = 127;</code>
     */
    public static final int CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST_VALUE = 127;
    /**
     * <code>CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST = 128;</code>
     */
    public static final int CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST_VALUE = 128;
    /**
     * <pre>
     * A request for a validator's status
     * </pre>
     *
     * <code>CLIENT_STATUS_GET_REQUEST = 129;</code>
     */
    public static final int CLIENT_STATUS_GET_REQUEST_VALUE = 129;
    /**
     * <pre>
     * A response with the validator's status
     * </pre>
     *
     * <code>CLIENT_STATUS_GET_RESPONSE = 130;</code>
     */
    public static final int CLIENT_STATUS_GET_RESPONSE_VALUE = 130;
    /**
     * <pre>
     * Message types for events
     * </pre>
     *
     * <code>CLIENT_EVENTS_SUBSCRIBE_REQUEST = 500;</code>
     */
    public static final int CLIENT_EVENTS_SUBSCRIBE_REQUEST_VALUE = 500;
    /**
     * <code>CLIENT_EVENTS_SUBSCRIBE_RESPONSE = 501;</code>
     */
    public static final int CLIENT_EVENTS_SUBSCRIBE_RESPONSE_VALUE = 501;
    /**
     * <code>CLIENT_EVENTS_UNSUBSCRIBE_REQUEST = 502;</code>
     */
    public static final int CLIENT_EVENTS_UNSUBSCRIBE_REQUEST_VALUE = 502;
    /**
     * <code>CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE = 503;</code>
     */
    public static final int CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE_VALUE = 503;
    /**
     * <code>CLIENT_EVENTS = 504;</code>
     */
    public static final int CLIENT_EVENTS_VALUE = 504;
    /**
     * <code>CLIENT_EVENTS_GET_REQUEST = 505;</code>
     */
    public static final int CLIENT_EVENTS_GET_REQUEST_VALUE = 505;
    /**
     * <code>CLIENT_EVENTS_GET_RESPONSE = 506;</code>
     */
    public static final int CLIENT_EVENTS_GET_RESPONSE_VALUE = 506;
    /**
     * <pre>
     * Temp message types until a discussion can be had about gossip msg
     * </pre>
     *
     * <code>GOSSIP_MESSAGE = 200;</code>
     */
    public static final int GOSSIP_MESSAGE_VALUE = 200;
    /**
     * <code>GOSSIP_REGISTER = 201;</code>
     */
    public static final int GOSSIP_REGISTER_VALUE = 201;
    /**
     * <code>GOSSIP_UNREGISTER = 202;</code>
     */
    public static final int GOSSIP_UNREGISTER_VALUE = 202;
    /**
     * <code>GOSSIP_BLOCK_REQUEST = 205;</code>
     */
    public static final int GOSSIP_BLOCK_REQUEST_VALUE = 205;
    /**
     * <code>GOSSIP_BLOCK_RESPONSE = 206;</code>
     */
    public static final int GOSSIP_BLOCK_RESPONSE_VALUE = 206;
    /**
     * <code>GOSSIP_BATCH_BY_BATCH_ID_REQUEST = 207;</code>
     */
    public static final int GOSSIP_BATCH_BY_BATCH_ID_REQUEST_VALUE = 207;
    /**
     * <code>GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST = 208;</code>
     */
    public static final int GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST_VALUE = 208;
    /**
     * <code>GOSSIP_BATCH_RESPONSE = 209;</code>
     */
    public static final int GOSSIP_BATCH_RESPONSE_VALUE = 209;
    /**
     * <code>GOSSIP_GET_PEERS_REQUEST = 210;</code>
     */
    public static final int GOSSIP_GET_PEERS_REQUEST_VALUE = 210;
    /**
     * <code>GOSSIP_GET_PEERS_RESPONSE = 211;</code>
     */
    public static final int GOSSIP_GET_PEERS_RESPONSE_VALUE = 211;
    /**
     * <code>NETWORK_ACK = 300;</code>
     */
    public static final int NETWORK_ACK_VALUE = 300;
    /**
     * <code>NETWORK_CONNECT = 301;</code>
     */
    public static final int NETWORK_CONNECT_VALUE = 301;
    /**
     * <code>NETWORK_DISCONNECT = 302;</code>
     */
    public static final int NETWORK_DISCONNECT_VALUE = 302;
    /**
     * <pre>
     * Message types for Authorization Types
     * </pre>
     *
     * <code>AUTHORIZATION_CONNECTION_RESPONSE = 600;</code>
     */
    public static final int AUTHORIZATION_CONNECTION_RESPONSE_VALUE = 600;
    /**
     * <code>AUTHORIZATION_VIOLATION = 601;</code>
     */
    public static final int AUTHORIZATION_VIOLATION_VALUE = 601;
    /**
     * <code>AUTHORIZATION_TRUST_REQUEST = 602;</code>
     */
    public static final int AUTHORIZATION_TRUST_REQUEST_VALUE = 602;
    /**
     * <code>AUTHORIZATION_TRUST_RESPONSE = 603;</code>
     */
    public static final int AUTHORIZATION_TRUST_RESPONSE_VALUE = 603;
    /**
     * <code>AUTHORIZATION_CHALLENGE_REQUEST = 604;</code>
     */
    public static final int AUTHORIZATION_CHALLENGE_REQUEST_VALUE = 604;
    /**
     * <code>AUTHORIZATION_CHALLENGE_RESPONSE = 605;</code>
     */
    public static final int AUTHORIZATION_CHALLENGE_RESPONSE_VALUE = 605;
    /**
     * <code>AUTHORIZATION_CHALLENGE_SUBMIT = 606;</code>
     */
    public static final int AUTHORIZATION_CHALLENGE_SUBMIT_VALUE = 606;
    /**
     * <code>AUTHORIZATION_CHALLENGE_RESULT = 607;</code>
     */
    public static final int AUTHORIZATION_CHALLENGE_RESULT_VALUE = 607;
    /**
     * <code>PING_REQUEST = 700;</code>
     */
    public static final int PING_REQUEST_VALUE = 700;
    /**
     * <code>PING_RESPONSE = 701;</code>
     */
    public static final int PING_RESPONSE_VALUE = 701;
    /**
     * <pre>
     * Consensus service messages
     * </pre>
     *
     * <code>CONSENSUS_REGISTER_REQUEST = 800;</code>
     */
    public static final int CONSENSUS_REGISTER_REQUEST_VALUE = 800;
    /**
     * <code>CONSENSUS_REGISTER_RESPONSE = 801;</code>
     */
    public static final int CONSENSUS_REGISTER_RESPONSE_VALUE = 801;
    /**
     * <code>CONSENSUS_SEND_TO_REQUEST = 802;</code>
     */
    public static final int CONSENSUS_SEND_TO_REQUEST_VALUE = 802;
    /**
     * <code>CONSENSUS_SEND_TO_RESPONSE = 803;</code>
     */
    public static final int CONSENSUS_SEND_TO_RESPONSE_VALUE = 803;
    /**
     * <code>CONSENSUS_BROADCAST_REQUEST = 804;</code>
     */
    public static final int CONSENSUS_BROADCAST_REQUEST_VALUE = 804;
    /**
     * <code>CONSENSUS_BROADCAST_RESPONSE = 805;</code>
     */
    public static final int CONSENSUS_BROADCAST_RESPONSE_VALUE = 805;
    /**
     * <code>CONSENSUS_INITIALIZE_BLOCK_REQUEST = 806;</code>
     */
    public static final int CONSENSUS_INITIALIZE_BLOCK_REQUEST_VALUE = 806;
    /**
     * <code>CONSENSUS_INITIALIZE_BLOCK_RESPONSE = 807;</code>
     */
    public static final int CONSENSUS_INITIALIZE_BLOCK_RESPONSE_VALUE = 807;
    /**
     * <code>CONSENSUS_FINALIZE_BLOCK_REQUEST = 808;</code>
     */
    public static final int CONSENSUS_FINALIZE_BLOCK_REQUEST_VALUE = 808;
    /**
     * <code>CONSENSUS_FINALIZE_BLOCK_RESPONSE = 809;</code>
     */
    public static final int CONSENSUS_FINALIZE_BLOCK_RESPONSE_VALUE = 809;
    /**
     * <code>CONSENSUS_CANCEL_BLOCK_REQUEST = 810;</code>
     */
    public static final int CONSENSUS_CANCEL_BLOCK_REQUEST_VALUE = 810;
    /**
     * <code>CONSENSUS_CANCEL_BLOCK_RESPONSE = 811;</code>
     */
    public static final int CONSENSUS_CANCEL_BLOCK_RESPONSE_VALUE = 811;
    /**
     * <code>CONSENSUS_CHECK_BLOCK_REQUEST = 812;</code>
     */
    public static final int CONSENSUS_CHECK_BLOCK_REQUEST_VALUE = 812;
    /**
     * <code>CONSENSUS_CHECK_BLOCK_RESPONSE = 813;</code>
     */
    public static final int CONSENSUS_CHECK_BLOCK_RESPONSE_VALUE = 813;
    /**
     * <code>CONSENSUS_COMMIT_BLOCK_REQUEST = 814;</code>
     */
    public static final int CONSENSUS_COMMIT_BLOCK_REQUEST_VALUE = 814;
    /**
     * <code>CONSENSUS_COMMIT_BLOCK_RESPONSE = 815;</code>
     */
    public static final int CONSENSUS_COMMIT_BLOCK_RESPONSE_VALUE = 815;
    /**
     * <code>CONSENSUS_IGNORE_BLOCK_REQUEST = 816;</code>
     */
    public static final int CONSENSUS_IGNORE_BLOCK_REQUEST_VALUE = 816;
    /**
     * <code>CONSENSUS_IGNORE_BLOCK_RESPONSE = 817;</code>
     */
    public static final int CONSENSUS_IGNORE_BLOCK_RESPONSE_VALUE = 817;
    /**
     * <code>CONSENSUS_FAIL_BLOCK_REQUEST = 818;</code>
     */
    public static final int CONSENSUS_FAIL_BLOCK_REQUEST_VALUE = 818;
    /**
     * <code>CONSENSUS_FAIL_BLOCK_RESPONSE = 819;</code>
     */
    public static final int CONSENSUS_FAIL_BLOCK_RESPONSE_VALUE = 819;
    /**
     * <code>CONSENSUS_SETTINGS_GET_REQUEST = 820;</code>
     */
    public static final int CONSENSUS_SETTINGS_GET_REQUEST_VALUE = 820;
    /**
     * <code>CONSENSUS_SETTINGS_GET_RESPONSE = 821;</code>
     */
    public static final int CONSENSUS_SETTINGS_GET_RESPONSE_VALUE = 821;
    /**
     * <code>CONSENSUS_STATE_GET_REQUEST = 822;</code>
     */
    public static final int CONSENSUS_STATE_GET_REQUEST_VALUE = 822;
    /**
     * <code>CONSENSUS_STATE_GET_RESPONSE = 823;</code>
     */
    public static final int CONSENSUS_STATE_GET_RESPONSE_VALUE = 823;
    /**
     * <code>CONSENSUS_BLOCKS_GET_REQUEST = 824;</code>
     */
    public static final int CONSENSUS_BLOCKS_GET_REQUEST_VALUE = 824;
    /**
     * <code>CONSENSUS_BLOCKS_GET_RESPONSE = 825;</code>
     */
    public static final int CONSENSUS_BLOCKS_GET_RESPONSE_VALUE = 825;
    /**
     * <pre>
     * Consensus notification messages
     * </pre>
     *
     * <code>CONSENSUS_NOTIFY_PEER_CONNECTED = 900;</code>
     */
    public static final int CONSENSUS_NOTIFY_PEER_CONNECTED_VALUE = 900;
    /**
     * <code>CONSENSUS_NOTIFY_PEER_DISCONNECTED = 901;</code>
     */
    public static final int CONSENSUS_NOTIFY_PEER_DISCONNECTED_VALUE = 901;
    /**
     * <code>CONSENSUS_NOTIFY_PEER_MESSAGE = 902;</code>
     */
    public static final int CONSENSUS_NOTIFY_PEER_MESSAGE_VALUE = 902;
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_NEW = 903;</code>
     */
    public static final int CONSENSUS_NOTIFY_BLOCK_NEW_VALUE = 903;
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_VALID = 904;</code>
     */
    public static final int CONSENSUS_NOTIFY_BLOCK_VALID_VALUE = 904;
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_INVALID = 905;</code>
     */
    public static final int CONSENSUS_NOTIFY_BLOCK_INVALID_VALUE = 905;
    /**
     * <code>CONSENSUS_NOTIFY_BLOCK_COMMIT = 906;</code>
     */
    public static final int CONSENSUS_NOTIFY_BLOCK_COMMIT_VALUE = 906;
    /**
     * <code>CONSENSUS_NOTIFY_ACK = 999;</code>
     */
    public static final int CONSENSUS_NOTIFY_ACK_VALUE = 999;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MessageType valueOf(int value) {
      return forNumber(value);
    }

    public static MessageType forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT;
        case 1: return TP_REGISTER_REQUEST;
        case 2: return TP_REGISTER_RESPONSE;
        case 3: return TP_UNREGISTER_REQUEST;
        case 4: return TP_UNREGISTER_RESPONSE;
        case 5: return TP_PROCESS_REQUEST;
        case 6: return TP_PROCESS_RESPONSE;
        case 7: return TP_STATE_GET_REQUEST;
        case 8: return TP_STATE_GET_RESPONSE;
        case 9: return TP_STATE_SET_REQUEST;
        case 10: return TP_STATE_SET_RESPONSE;
        case 11: return TP_STATE_DELETE_REQUEST;
        case 12: return TP_STATE_DELETE_RESPONSE;
        case 13: return TP_RECEIPT_ADD_DATA_REQUEST;
        case 14: return TP_RECEIPT_ADD_DATA_RESPONSE;
        case 15: return TP_EVENT_ADD_REQUEST;
        case 16: return TP_EVENT_ADD_RESPONSE;
        case 100: return CLIENT_BATCH_SUBMIT_REQUEST;
        case 101: return CLIENT_BATCH_SUBMIT_RESPONSE;
        case 102: return CLIENT_BLOCK_LIST_REQUEST;
        case 103: return CLIENT_BLOCK_LIST_RESPONSE;
        case 104: return CLIENT_BLOCK_GET_BY_ID_REQUEST;
        case 105: return CLIENT_BLOCK_GET_RESPONSE;
        case 106: return CLIENT_BATCH_LIST_REQUEST;
        case 107: return CLIENT_BATCH_LIST_RESPONSE;
        case 108: return CLIENT_BATCH_GET_REQUEST;
        case 109: return CLIENT_BATCH_GET_RESPONSE;
        case 110: return CLIENT_TRANSACTION_LIST_REQUEST;
        case 111: return CLIENT_TRANSACTION_LIST_RESPONSE;
        case 112: return CLIENT_TRANSACTION_GET_REQUEST;
        case 113: return CLIENT_TRANSACTION_GET_RESPONSE;
        case 114: return CLIENT_STATE_CURRENT_REQUEST;
        case 115: return CLIENT_STATE_CURRENT_RESPONSE;
        case 116: return CLIENT_STATE_LIST_REQUEST;
        case 117: return CLIENT_STATE_LIST_RESPONSE;
        case 118: return CLIENT_STATE_GET_REQUEST;
        case 119: return CLIENT_STATE_GET_RESPONSE;
        case 120: return CLIENT_BATCH_STATUS_REQUEST;
        case 121: return CLIENT_BATCH_STATUS_RESPONSE;
        case 122: return CLIENT_RECEIPT_GET_REQUEST;
        case 123: return CLIENT_RECEIPT_GET_RESPONSE;
        case 124: return CLIENT_BLOCK_GET_BY_NUM_REQUEST;
        case 125: return CLIENT_PEERS_GET_REQUEST;
        case 126: return CLIENT_PEERS_GET_RESPONSE;
        case 127: return CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST;
        case 128: return CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST;
        case 129: return CLIENT_STATUS_GET_REQUEST;
        case 130: return CLIENT_STATUS_GET_RESPONSE;
        case 500: return CLIENT_EVENTS_SUBSCRIBE_REQUEST;
        case 501: return CLIENT_EVENTS_SUBSCRIBE_RESPONSE;
        case 502: return CLIENT_EVENTS_UNSUBSCRIBE_REQUEST;
        case 503: return CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE;
        case 504: return CLIENT_EVENTS;
        case 505: return CLIENT_EVENTS_GET_REQUEST;
        case 506: return CLIENT_EVENTS_GET_RESPONSE;
        case 200: return GOSSIP_MESSAGE;
        case 201: return GOSSIP_REGISTER;
        case 202: return GOSSIP_UNREGISTER;
        case 205: return GOSSIP_BLOCK_REQUEST;
        case 206: return GOSSIP_BLOCK_RESPONSE;
        case 207: return GOSSIP_BATCH_BY_BATCH_ID_REQUEST;
        case 208: return GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST;
        case 209: return GOSSIP_BATCH_RESPONSE;
        case 210: return GOSSIP_GET_PEERS_REQUEST;
        case 211: return GOSSIP_GET_PEERS_RESPONSE;
        case 300: return NETWORK_ACK;
        case 301: return NETWORK_CONNECT;
        case 302: return NETWORK_DISCONNECT;
        case 600: return AUTHORIZATION_CONNECTION_RESPONSE;
        case 601: return AUTHORIZATION_VIOLATION;
        case 602: return AUTHORIZATION_TRUST_REQUEST;
        case 603: return AUTHORIZATION_TRUST_RESPONSE;
        case 604: return AUTHORIZATION_CHALLENGE_REQUEST;
        case 605: return AUTHORIZATION_CHALLENGE_RESPONSE;
        case 606: return AUTHORIZATION_CHALLENGE_SUBMIT;
        case 607: return AUTHORIZATION_CHALLENGE_RESULT;
        case 700: return PING_REQUEST;
        case 701: return PING_RESPONSE;
        case 800: return CONSENSUS_REGISTER_REQUEST;
        case 801: return CONSENSUS_REGISTER_RESPONSE;
        case 802: return CONSENSUS_SEND_TO_REQUEST;
        case 803: return CONSENSUS_SEND_TO_RESPONSE;
        case 804: return CONSENSUS_BROADCAST_REQUEST;
        case 805: return CONSENSUS_BROADCAST_RESPONSE;
        case 806: return CONSENSUS_INITIALIZE_BLOCK_REQUEST;
        case 807: return CONSENSUS_INITIALIZE_BLOCK_RESPONSE;
        case 808: return CONSENSUS_FINALIZE_BLOCK_REQUEST;
        case 809: return CONSENSUS_FINALIZE_BLOCK_RESPONSE;
        case 810: return CONSENSUS_CANCEL_BLOCK_REQUEST;
        case 811: return CONSENSUS_CANCEL_BLOCK_RESPONSE;
        case 812: return CONSENSUS_CHECK_BLOCK_REQUEST;
        case 813: return CONSENSUS_CHECK_BLOCK_RESPONSE;
        case 814: return CONSENSUS_COMMIT_BLOCK_REQUEST;
        case 815: return CONSENSUS_COMMIT_BLOCK_RESPONSE;
        case 816: return CONSENSUS_IGNORE_BLOCK_REQUEST;
        case 817: return CONSENSUS_IGNORE_BLOCK_RESPONSE;
        case 818: return CONSENSUS_FAIL_BLOCK_REQUEST;
        case 819: return CONSENSUS_FAIL_BLOCK_RESPONSE;
        case 820: return CONSENSUS_SETTINGS_GET_REQUEST;
        case 821: return CONSENSUS_SETTINGS_GET_RESPONSE;
        case 822: return CONSENSUS_STATE_GET_REQUEST;
        case 823: return CONSENSUS_STATE_GET_RESPONSE;
        case 824: return CONSENSUS_BLOCKS_GET_REQUEST;
        case 825: return CONSENSUS_BLOCKS_GET_RESPONSE;
        case 900: return CONSENSUS_NOTIFY_PEER_CONNECTED;
        case 901: return CONSENSUS_NOTIFY_PEER_DISCONNECTED;
        case 902: return CONSENSUS_NOTIFY_PEER_MESSAGE;
        case 903: return CONSENSUS_NOTIFY_BLOCK_NEW;
        case 904: return CONSENSUS_NOTIFY_BLOCK_VALID;
        case 905: return CONSENSUS_NOTIFY_BLOCK_INVALID;
        case 906: return CONSENSUS_NOTIFY_BLOCK_COMMIT;
        case 999: return CONSENSUS_NOTIFY_ACK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MessageType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
            public MessageType findValueByNumber(int number) {
              return MessageType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return sawtooth.sdk.protobuf.Message.getDescriptor().getEnumTypes().get(0);
    }

    private static final MessageType[] VALUES = values();

    public static MessageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MessageType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Message.MessageType)
  }

  public static final int MESSAGE_TYPE_FIELD_NUMBER = 1;
  private int messageType_;
  /**
   * <pre>
   * The type of message, used to determine how to 'route' the message
   * to the appropriate handler as well as how to deserialize the
   * content.
   * </pre>
   *
   * <code>.Message.MessageType message_type = 1;</code>
   */
  public int getMessageTypeValue() {
    return messageType_;
  }
  /**
   * <pre>
   * The type of message, used to determine how to 'route' the message
   * to the appropriate handler as well as how to deserialize the
   * content.
   * </pre>
   *
   * <code>.Message.MessageType message_type = 1;</code>
   */
  public sawtooth.sdk.protobuf.Message.MessageType getMessageType() {
    @SuppressWarnings("deprecation")
    sawtooth.sdk.protobuf.Message.MessageType result = sawtooth.sdk.protobuf.Message.MessageType.valueOf(messageType_);
    return result == null ? sawtooth.sdk.protobuf.Message.MessageType.UNRECOGNIZED : result;
  }

  public static final int CORRELATION_ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object correlationId_;
  /**
   * <pre>
   * The identifier used to correlate response messages to their related
   * request messages.  correlation_id should be set to a random string
   * for messages which are not responses to previously sent messages.  For
   * response messages, correlation_id should be set to the same string as
   * contained in the request message.
   * </pre>
   *
   * <code>string correlation_id = 2;</code>
   */
  public java.lang.String getCorrelationId() {
    java.lang.Object ref = correlationId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      correlationId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The identifier used to correlate response messages to their related
   * request messages.  correlation_id should be set to a random string
   * for messages which are not responses to previously sent messages.  For
   * response messages, correlation_id should be set to the same string as
   * contained in the request message.
   * </pre>
   *
   * <code>string correlation_id = 2;</code>
   */
  public com.google.protobuf.ByteString
      getCorrelationIdBytes() {
    java.lang.Object ref = correlationId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      correlationId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONTENT_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString content_;
  /**
   * <pre>
   * The content of the message, defined by message_type.  In many
   * cases, this data has been serialized with Protocol Buffers or
   * CBOR.
   * </pre>
   *
   * <code>bytes content = 3;</code>
   */
  public com.google.protobuf.ByteString getContent() {
    return content_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (messageType_ != sawtooth.sdk.protobuf.Message.MessageType.DEFAULT.getNumber()) {
      output.writeEnum(1, messageType_);
    }
    if (!getCorrelationIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, correlationId_);
    }
    if (!content_.isEmpty()) {
      output.writeBytes(3, content_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (messageType_ != sawtooth.sdk.protobuf.Message.MessageType.DEFAULT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, messageType_);
    }
    if (!getCorrelationIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, correlationId_);
    }
    if (!content_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, content_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof sawtooth.sdk.protobuf.Message)) {
      return super.equals(obj);
    }
    sawtooth.sdk.protobuf.Message other = (sawtooth.sdk.protobuf.Message) obj;

    boolean result = true;
    result = result && messageType_ == other.messageType_;
    result = result && getCorrelationId()
        .equals(other.getCorrelationId());
    result = result && getContent()
        .equals(other.getContent());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MESSAGE_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + messageType_;
    hash = (37 * hash) + CORRELATION_ID_FIELD_NUMBER;
    hash = (53 * hash) + getCorrelationId().hashCode();
    hash = (37 * hash) + CONTENT_FIELD_NUMBER;
    hash = (53 * hash) + getContent().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static sawtooth.sdk.protobuf.Message parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static sawtooth.sdk.protobuf.Message parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static sawtooth.sdk.protobuf.Message parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sawtooth.sdk.protobuf.Message parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(sawtooth.sdk.protobuf.Message prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The message passed between the validator and client, containing the
   * header fields and content.
   * </pre>
   *
   * Protobuf type {@code Message}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:Message)
      sawtooth.sdk.protobuf.MessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sawtooth.sdk.protobuf.Validator.internal_static_Message_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sawtooth.sdk.protobuf.Validator.internal_static_Message_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sawtooth.sdk.protobuf.Message.class, sawtooth.sdk.protobuf.Message.Builder.class);
    }

    // Construct using sawtooth.sdk.protobuf.Message.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      messageType_ = 0;

      correlationId_ = "";

      content_ = com.google.protobuf.ByteString.EMPTY;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return sawtooth.sdk.protobuf.Validator.internal_static_Message_descriptor;
    }

    @java.lang.Override
    public sawtooth.sdk.protobuf.Message getDefaultInstanceForType() {
      return sawtooth.sdk.protobuf.Message.getDefaultInstance();
    }

    @java.lang.Override
    public sawtooth.sdk.protobuf.Message build() {
      sawtooth.sdk.protobuf.Message result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public sawtooth.sdk.protobuf.Message buildPartial() {
      sawtooth.sdk.protobuf.Message result = new sawtooth.sdk.protobuf.Message(this);
      result.messageType_ = messageType_;
      result.correlationId_ = correlationId_;
      result.content_ = content_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof sawtooth.sdk.protobuf.Message) {
        return mergeFrom((sawtooth.sdk.protobuf.Message)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(sawtooth.sdk.protobuf.Message other) {
      if (other == sawtooth.sdk.protobuf.Message.getDefaultInstance()) return this;
      if (other.messageType_ != 0) {
        setMessageTypeValue(other.getMessageTypeValue());
      }
      if (!other.getCorrelationId().isEmpty()) {
        correlationId_ = other.correlationId_;
        onChanged();
      }
      if (other.getContent() != com.google.protobuf.ByteString.EMPTY) {
        setContent(other.getContent());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      sawtooth.sdk.protobuf.Message parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (sawtooth.sdk.protobuf.Message) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int messageType_ = 0;
    /**
     * <pre>
     * The type of message, used to determine how to 'route' the message
     * to the appropriate handler as well as how to deserialize the
     * content.
     * </pre>
     *
     * <code>.Message.MessageType message_type = 1;</code>
     */
    public int getMessageTypeValue() {
      return messageType_;
    }
    /**
     * <pre>
     * The type of message, used to determine how to 'route' the message
     * to the appropriate handler as well as how to deserialize the
     * content.
     * </pre>
     *
     * <code>.Message.MessageType message_type = 1;</code>
     */
    public Builder setMessageTypeValue(int value) {
      messageType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of message, used to determine how to 'route' the message
     * to the appropriate handler as well as how to deserialize the
     * content.
     * </pre>
     *
     * <code>.Message.MessageType message_type = 1;</code>
     */
    public sawtooth.sdk.protobuf.Message.MessageType getMessageType() {
      @SuppressWarnings("deprecation")
      sawtooth.sdk.protobuf.Message.MessageType result = sawtooth.sdk.protobuf.Message.MessageType.valueOf(messageType_);
      return result == null ? sawtooth.sdk.protobuf.Message.MessageType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The type of message, used to determine how to 'route' the message
     * to the appropriate handler as well as how to deserialize the
     * content.
     * </pre>
     *
     * <code>.Message.MessageType message_type = 1;</code>
     */
    public Builder setMessageType(sawtooth.sdk.protobuf.Message.MessageType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      messageType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of message, used to determine how to 'route' the message
     * to the appropriate handler as well as how to deserialize the
     * content.
     * </pre>
     *
     * <code>.Message.MessageType message_type = 1;</code>
     */
    public Builder clearMessageType() {
      
      messageType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object correlationId_ = "";
    /**
     * <pre>
     * The identifier used to correlate response messages to their related
     * request messages.  correlation_id should be set to a random string
     * for messages which are not responses to previously sent messages.  For
     * response messages, correlation_id should be set to the same string as
     * contained in the request message.
     * </pre>
     *
     * <code>string correlation_id = 2;</code>
     */
    public java.lang.String getCorrelationId() {
      java.lang.Object ref = correlationId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        correlationId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The identifier used to correlate response messages to their related
     * request messages.  correlation_id should be set to a random string
     * for messages which are not responses to previously sent messages.  For
     * response messages, correlation_id should be set to the same string as
     * contained in the request message.
     * </pre>
     *
     * <code>string correlation_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCorrelationIdBytes() {
      java.lang.Object ref = correlationId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        correlationId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The identifier used to correlate response messages to their related
     * request messages.  correlation_id should be set to a random string
     * for messages which are not responses to previously sent messages.  For
     * response messages, correlation_id should be set to the same string as
     * contained in the request message.
     * </pre>
     *
     * <code>string correlation_id = 2;</code>
     */
    public Builder setCorrelationId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      correlationId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The identifier used to correlate response messages to their related
     * request messages.  correlation_id should be set to a random string
     * for messages which are not responses to previously sent messages.  For
     * response messages, correlation_id should be set to the same string as
     * contained in the request message.
     * </pre>
     *
     * <code>string correlation_id = 2;</code>
     */
    public Builder clearCorrelationId() {
      
      correlationId_ = getDefaultInstance().getCorrelationId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The identifier used to correlate response messages to their related
     * request messages.  correlation_id should be set to a random string
     * for messages which are not responses to previously sent messages.  For
     * response messages, correlation_id should be set to the same string as
     * contained in the request message.
     * </pre>
     *
     * <code>string correlation_id = 2;</code>
     */
    public Builder setCorrelationIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      correlationId_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString content_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * The content of the message, defined by message_type.  In many
     * cases, this data has been serialized with Protocol Buffers or
     * CBOR.
     * </pre>
     *
     * <code>bytes content = 3;</code>
     */
    public com.google.protobuf.ByteString getContent() {
      return content_;
    }
    /**
     * <pre>
     * The content of the message, defined by message_type.  In many
     * cases, this data has been serialized with Protocol Buffers or
     * CBOR.
     * </pre>
     *
     * <code>bytes content = 3;</code>
     */
    public Builder setContent(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      content_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The content of the message, defined by message_type.  In many
     * cases, this data has been serialized with Protocol Buffers or
     * CBOR.
     * </pre>
     *
     * <code>bytes content = 3;</code>
     */
    public Builder clearContent() {
      
      content_ = getDefaultInstance().getContent();
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:Message)
  }

  // @@protoc_insertion_point(class_scope:Message)
  private static final sawtooth.sdk.protobuf.Message DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new sawtooth.sdk.protobuf.Message();
  }

  public static sawtooth.sdk.protobuf.Message getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Message>
      PARSER = new com.google.protobuf.AbstractParser<Message>() {
    @java.lang.Override
    public Message parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Message(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Message> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Message> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public sawtooth.sdk.protobuf.Message getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

